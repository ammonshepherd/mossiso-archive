{"id":1426,"date":"2014-09-22T14:13:28","date_gmt":"2014-09-22T18:13:28","guid":{"rendered":"http:\/\/mossiso.com\/?p=1426"},"modified":"2014-09-22T14:13:28","modified_gmt":"2014-09-22T18:13:28","slug":"setting-up-a-hosting-environment-part-5-apache-and-php","status":"publish","type":"post","link":"https:\/\/mossiso.com\/2014\/09\/22\/setting-up-a-hosting-environment-part-5-apache-and-php\/","title":{"rendered":"Setting up a Hosting Environment, Part 5: Apache and PHP"},"content":{"rendered":"<p>Figuring out the possibilities for Apache and PHP reminds me of a Dr. Seuss book, &#8220;Fox in Sox&#8221;. It&#8217;s a favorite of mine. I love reading it to the kids. In it, Mr. Fox tries to get Mr. Knox to say all kinds of ridiculous (in meaning and hard to say) tongue twisters. At one point Mr. Knox exclaims:<br \/>\n&#8220;I can&#8217;t blab such blibber blubber!<br \/>\nMy tongue isn&#8217;t make of rubber.&#8221;<\/p>\n<p>That&#8217;s what my brain felt like after trying to figure all of the options for Apache and PHP. To combat my rubber brain, I created this flow-chart to help me keep track of the options, the pros and cons for each, and the path I finally chose.<\/p>\n<p>First off, a list of requirements and goals:<\/p>\n<ol>\n<li>Chroot each vhost to it&#8217;s own directory, and have Apache and PHP run on that vhost&#8217;s server account<\/li>\n<li>Speed, run Apache and PHP at their most effective and efficient levels<\/li>\n<li>Utilize an opcode cache, APC, to speed up PHP pages<\/li>\n<li>Use trusted repositories to make installation and upgrading easier<\/li>\n<\/ol>\n<p>Here&#8217;s what I eventually figured out about Apache and PHP:<\/p>\n<figure id=\"attachment_1427\" aria-describedby=\"caption-attachment-1427\" style=\"width: 625px\" class=\"wp-caption aligncenter\"><a href=\"http:\/\/mossiso.com\/wp-content\/uploads\/2013\/02\/ApachePHP.png\"><img loading=\"lazy\" decoding=\"async\" class=\"size-large wp-image-1427\" src=\"http:\/\/mossiso.com\/wp-content\/uploads\/2013\/02\/ApachePHP-629x1024.png\" alt=\"ApachePHP\" width=\"625\" height=\"1017\" srcset=\"https:\/\/mossiso.com\/wp-content\/uploads\/2013\/02\/ApachePHP-629x1024.png 629w, https:\/\/mossiso.com\/wp-content\/uploads\/2013\/02\/ApachePHP-184x300.png 184w, https:\/\/mossiso.com\/wp-content\/uploads\/2013\/02\/ApachePHP-250x406.png 250w, https:\/\/mossiso.com\/wp-content\/uploads\/2013\/02\/ApachePHP-92x150.png 92w, https:\/\/mossiso.com\/wp-content\/uploads\/2013\/02\/ApachePHP-624x1015.png 624w, https:\/\/mossiso.com\/wp-content\/uploads\/2013\/02\/ApachePHP.png 1087w\" sizes=\"(max-width: 625px) 100vw, 625px\" \/><\/a><figcaption id=\"caption-attachment-1427\" class=\"wp-caption-text\">Click on the image to see a larger view<\/figcaption><\/figure>\n<p>These sites were helpful for the initial set up of PHP as CGI with mod_fcgi and Apache in chroot (mod_fcgi sends one request to each PHP process regardless if PHP children are available to handle more, and no sharing of APC opcode cache across PHP processes):<\/p>\n<ul>\n<li><a href=\"http:\/\/www.howtoforge.com\/how-to-set-up-apache2-with-mod_fcgid-and-php5-on-centos-5.2\">http:\/\/www.howtoforge.com\/how-to-set-up-apache2-with-mod_fcgid-and-php5-on-centos-5.2<\/a><\/li>\n<li><a href=\"http:\/\/forum.linode.com\/viewtopic.php?t=2982\">http:\/\/forum.linode.com\/viewtopic.php?t=2982<\/a><\/li>\n<\/ul>\n<p>This site was helpful for setting up PHP as CGI with mod_fastcgi and Apache in chroot (mod_fastcgi sends multiple requests to a PHP process, so the process can send them to children processes, and having one PHP process for each site allows for APC opcode cache to be usable.)<\/p>\n<ul>\n<li><a href=\"http:\/\/www.brandonturner.net\/blog\/2009\/07\/fastcgi_with_php_opcode_cache\/\">http:\/\/www.brandonturner.net\/blog\/2009\/07\/fastcgi_with_php_opcode_cache\/<\/a><\/li>\n<\/ul>\n<p>These sites helped me learn about php-fpm and how it is not quite ready for what I have in mind:<\/p>\n<ul>\n<li><a href=\"http:\/\/www.makina-corpus.org\/blog\/install-drupal-php-fpm-fastcgi-apache-and-chroot-php-fpm\">http:\/\/www.makina-corpus.org\/blog\/install-drupal-php-fpm-fastcgi-apache-and-chroot-php-fpm<\/a><\/li>\n<li><a href=\"https:\/\/groups.google.com\/forum\/?fromgroups=#!topic\/highload-php-en\/Uq2MDrudMQ4\">https:\/\/groups.google.com\/forum\/?fromgroups=#!topic\/highload-php-en\/Uq2MDrudMQ4<\/a><\/li>\n<\/ul>\n<p>I ended up going with Apache&#8217;s mod_fastcgi for using PHP as a CGI, and NOT using PHP-FPM, while running Apache in threaded mode with apache.worker enabled.<\/p>\n<p>To get this set up is pretty easy. I already had Apache and PHP installed and running (with PHP as CGI using mod_fcgi), so here are the steps I used to convert it to run mod_fastcgi and apache.worker. I&#8217;m running CentOS 6.3.<\/p>\n<h4>Install the RPMForge repo for installing mod_fastcgi.<\/h4>\n<ul>\n<li>Get latest from <a href=\"http:\/\/repoforge.org\/use\/\">http:\/\/repoforge.org\/use\/<\/a> : <code>rpm -Uvh http:\/\/pkgs.repoforge.org\/rpmforge-release\/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm<\/code><\/li>\n<li><code>yum --enablerepo=rpmforge install mod_fastcgi<\/code><\/li>\n<\/ul>\n<h4>Edit the <code>\/etc\/httpd\/conf\/httpd.conf<\/code> file<\/h4>\n<ul>\n<li><code>ServerTokens Prod<\/code><\/li>\n<li><code>KeepAlive On<\/code><\/li>\n<li>Edit the worker section. I still need to do some testing to figure out the best configuration\n<pre class=\"decode-attributes:false lang:apache decode:true \">&lt;IfModule worker.c&gt;\r\n    StartServers         8\r\n    MaxClients         300\r\n    MinSpareThreads     25\r\n    MaxSpareThreads     75\r\n    ThreadsPerChild     25\r\n    MaxRequestsPerChild  0\r\n&lt;\/IfModule&gt;<\/pre>\n<\/li>\n<li>If there, make sure to comment out, or delete the lines for mod_php: <code>LoadModule php5_module modules\/libphp5.so<\/code><\/li>\n<li>this line also: <code>AddType application\/x-httpd-php .php<\/code><\/li>\n<li>The last line should be: <code>Include conf\/virtual_hosts.conf<\/code><\/li>\n<\/ul>\n<p>&nbsp;<\/p>\n<h4>Create a <code>\/etc\/httpd\/conf\/virtual_hosts.conf<\/code> file<\/h4>\n<p>Each virtual host needs to have an entry similar to this in the httpd.conf file, or I like to create a separate virtual_host.conf and include that in the main httpd.conf.<\/p>\n<pre class=\"decode-attributes:false lang:apache decode:true\"># Name-based virtual hosts\r\n#\r\n\r\n# Default\r\nNameVirtualHost *:80\r\n\r\n# Begin domain-name.com section\r\n&lt;VirtualHost *:80&gt;\r\n    DocumentRoot \/var\/domain-name\/home\/html\/\r\n    ServerName domain-name.com\r\n    ServerAlias www.domain-name.com\r\n\r\n    # Rewrite domain name to not use the 'www'\r\n    RewriteEngine On\r\n    RewriteCond %{HTTP_HOST}    !^domain-name\\.com$ [NC]\r\n    RewriteRule ^\/(.*)  http:\/\/domain-name.com\/$1 [R=301]\r\n\r\n    # Specify where the error logs go for each domain\r\n    ErrorLog \/var\/logs\/httpd\/current\/domain-name.com-error_log\r\n    CustomLog \/var\/logs\/httpd\/current\/domain-name.com-access_log combined\r\n\r\n    &lt;IfModule mod_fastcgi.c&gt;\r\n        SuexecUserGroup domain-name domain-name\r\n        ScriptAlias \/cgi-bin\/ \"\/var\/www\/cgi-bin\/domain-name\/\"\r\n        &lt;Directory \"\/var\/domain-name\/home\/html\"&gt;\r\n            Options -Indexes FollowSymLinks +ExecCGI\r\n            AddHandler php5-fastcgi .php\r\n            Action php5-fastcgi \/cgi-bin\/php-fastcgi\r\n            Order allow,deny\r\n            Allow from all\r\n        &lt;\/Directory&gt;\r\n    &lt;\/IfModule&gt;\r\n&lt;\/VirtualHost&gt;\r\n# End domain-name.com section<\/pre>\n<p>Things to note:<\/p>\n<ul>\n<li>The line with <code>SuexecUserGroup<\/code> should have the user\/group for the project.<\/li>\n<\/ul>\n<h4>Create the php-fastcgi file<\/h4>\n<p>Add a <code>\/var\/www\/cgi-bin\/projectname\/php-fastcgi<\/code> file for each project. This allows php to run as FastCGI, and use suEXEC. The php-fastcgi file needs to be under suexec\u2019s default directory path <code>\/var\/www\/cgi-bin\/<\/code>.<\/p>\n<ul>\n<li>\n<div>\n<pre class=\"\">#!\/bin\/bash\r\n#\u00a0 Set PHPRC to the path for the php.ini file. Change this to\r\n#\u00a0 \/var\/projectname\/home\/ to let projects have their own php.ini file\r\nPHPRC=\/var\/domain-name\/home\/\r\nexport PHPRC\r\nexport PHP_FCGI_MAX_REQUESTS=5000\r\nexport PHP_FCGI_CHILDREN=5\r\nexec \/usr\/bin\/php-cgi<\/pre>\n<\/div>\n<\/li>\n<\/ul>\n<p>Things to note:<\/p>\n<ul>\n<li>The directory and file created above must be have user\/group of the project (the same as the user\/group of the \/var\/projectname\/ directory)<\/li>\n<li>The directory and file must be executable and writable by the owner ONLY.<\/li>\n<li>If you get Apache Internal Server errors, check <code>\/var\/log\/httpd\/suexec.log<\/code><\/li>\n<li>For each site, you can specify how much RAM the APC module can use. For large, busy sites, you set this higher. Not setting this defaults to 64MB, which is a bit more than needed for the average WP site. Change the last line in the <code>\/var\/www\/cgi-bin\/projectname\/php-fastcgi<\/code> file:\n<ul>\n<li><code>exec \/usr\/bin\/php-cgi -d apc.shm_size=128M<\/code><\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h4>Change php.conf<\/h4>\n<p>Comment out everything in the <code>\/etc\/httpd\/conf.d\/php.conf<\/code> file so php is not loaded as a module when Apache starts.<\/p>\n<h4>Apache multi-threaded<\/h4>\n<p>Edit the <code>\/etc\/sysconfig\/httpd<\/code> file to allow Apache to use multi-threaded mode (httpd.worker) which handles basic HTML files much nicer (less RAM). Uncomment the line with <code>HTTPD=\/usr\/sbin\/httpd.worker<\/code><\/p>\n<h4>Config Check<\/h4>\n<p>Check the Apache configuration files to see if there are any errors.<\/p>\n<ul>\n<li><code>service httpd configtest<\/code><\/li>\n<\/ul>\n<p>If all good, restart Apache<\/p>\n<ul>\n<li><code>service httpd restart<\/code> This will stop the running httpd service, and then start it again. Use this command after installing or removing a dynamically loaded module such as PHP. OR<\/li>\n<li><code>service httpd reload<\/code> This will cause the running httpd service to reload the configuration file. Note that any requests being currently processed will be interrupted, which may cause a client browser to display an error message or render a partial page. OR<\/li>\n<li><code>service httpd graceful<\/code> This will cause the running httpd service to reload the configuration file. Note that any requests being currently processed will use the old configuration.<\/li>\n<\/ul>\n<h3>Install APC<\/h3>\n<ul>\n<li><code>pecl install apc<\/code><\/li>\n<\/ul>\n<p>Set up log rotation for Apache<\/p>\n<ul>\n<li>Add a file <code>\/etc\/logrotate.d\/httpd.monti<\/code><\/li>\n<li>\n<div>\n<pre class=\"decode-attributes:false lang:apache decode:true\">\/var\/logs\/httpd\/*log {\r\n    daily\r\n    rotate 365\r\n    compress\r\n    missingok\r\n    notifempty\r\n    copytruncate\r\n    olddir \/var\/logs\/httpd\/archives\/\r\n    sharedscripts\r\n    postrotate\r\n        \/bin\/kill -HUP `cat \/var\/run\/httpd\/httpd.pid 2&gt;\/dev\/null` 2&gt; \/dev\/null || true\r\n    endscript\r\n}<\/pre>\n<\/div>\n<\/li>\n<\/ul>\n","protected":false},"excerpt":{"rendered":"<p>Figuring out the possibilities for Apache and PHP reminds me of a Dr. Seuss book, &#8220;Fox in Sox&#8221;. It&#8217;s a favorite of mine. I love reading it to the kids. In it, Mr. Fox tries to get Mr. Knox to say all kinds of ridiculous (in meaning and hard to say) tongue twisters. At one &hellip; <a href=\"https:\/\/mossiso.com\/2014\/09\/22\/setting-up-a-hosting-environment-part-5-apache-and-php\/\" class=\"more-link\">Continue reading <span class=\"screen-reader-text\">Setting up a Hosting Environment, Part 5: Apache and PHP<\/span><\/a><\/p>\n","protected":false},"author":1,"featured_media":1428,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"jetpack_post_was_ever_published":false,"_jetpack_newsletter_access":"","_jetpack_dont_email_post_to_subs":false,"_jetpack_newsletter_tier_id":0,"footnotes":"","jetpack_publicize_message":"","jetpack_publicize_feature_enabled":true,"jetpack_social_post_already_shared":false,"jetpack_social_options":{"image_generator_settings":{"template":"highway","enabled":false}}},"categories":[249,167,9,170],"tags":[20,251,254,28,252,253,69,250],"class_list":["post-1426","post","type-post","status-publish","format-standard","has-post-thumbnail","hentry","category-setting-up-a-hosting-environment","category-technical","category-technology","category-websites","tag-apache","tag-apache-worker","tag-apc","tag-centos","tag-mod_fastcti","tag-mod_fcgi","tag-php","tag-php-fpm"],"jetpack_publicize_connections":[],"jetpack_featured_media_url":"https:\/\/mossiso.com\/wp-content\/uploads\/2013\/02\/200px-FoxInSocksBookCover.jpg","jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/p9wosP-n0","_links":{"self":[{"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/posts\/1426"}],"collection":[{"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/comments?post=1426"}],"version-history":[{"count":7,"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/posts\/1426\/revisions"}],"predecessor-version":[{"id":1647,"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/posts\/1426\/revisions\/1647"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/media\/1428"}],"wp:attachment":[{"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/media?parent=1426"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/categories?post=1426"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/tags?post=1426"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}