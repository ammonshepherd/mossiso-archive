{"id":1618,"date":"2014-11-13T09:08:42","date_gmt":"2014-11-13T14:08:42","guid":{"rendered":"http:\/\/mossiso.com\/?p=1618"},"modified":"2017-02-06T10:42:39","modified_gmt":"2017-02-06T15:42:39","slug":"upgrading-omeka-and-neatline","status":"publish","type":"post","link":"https:\/\/mossiso.com\/2014\/11\/13\/upgrading-omeka-and-neatline\/","title":{"rendered":"Upgrading Omeka and Neatline"},"content":{"rendered":"<p>A first project at my new job at the Scholar&#8217;s Lab at UVA was to update some old Omeka\/Neatline sites.<\/p>\n<p><a href=\"http:\/\/mossiso.com\/wp-content\/uploads\/2014\/09\/slab-logo-rgb-350px.png\"><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-1626\" src=\"http:\/\/mossiso.com\/wp-content\/uploads\/2014\/09\/slab-logo-rgb-350px.png\" alt=\"slab-logo-rgb-350px\" width=\"350\" height=\"67\" srcset=\"https:\/\/mossiso.com\/wp-content\/uploads\/2014\/09\/slab-logo-rgb-350px.png 350w, https:\/\/mossiso.com\/wp-content\/uploads\/2014\/09\/slab-logo-rgb-350px-300x57.png 300w, https:\/\/mossiso.com\/wp-content\/uploads\/2014\/09\/slab-logo-rgb-350px-150x28.png 150w\" sizes=\"(max-width: 350px) 100vw, 350px\" \/><\/a><\/p>\n<p>I wrote a script to take care of the process now and in the future.<\/p>\n<p><a href=\"https:\/\/github.com\/mossiso\/onus\">https:\/\/github.com\/mossiso\/onus<\/a><\/p>\n<p>I perhaps went a little overboard and made it pretty robust. I was going to take the opportunity to learn some ruby, but ended up writing it in Bash. One thing I learned is that Bash does not handle comparing floating point numbers. And that was a bit part of the requirement.<\/p>\n<p>I&#8217;ll run through how to use the script as well as go through some of the logic found in the script.<\/p>\n<h1>Running the Script<\/h1>\n<p>Rather than repeat everything on the github page, just take a look there for steps on how to set up and run the script.<\/p>\n<p>Basically, you just run the script on the command line, it prompts for the path to the omeka install (or you can give it after the command), and automatically upgrades Omeka and Neatline to then next higher version number.<\/p>\n<pre class=\"lang:sh decode:true\">.\/onus.sh \/path\/to\/omeka\/install<\/pre>\n<p>You can add some flags\/options to the command to upgrade Omeka and Neatline to a specific version, or exclude the upgrading and just make a backup copy of the database and files into a zip file.<\/p>\n<h1>About the Script<\/h1>\n<p>The purpose of the script is to upgrade Omeka and Neatline. One big problem arose when upgrading sites that were previous to 2.0.0.<\/p>\n<p>Omeka and Neatline both go through some significant database (and code) changes from 1.5.x to 2.x.x. The biggest seemed to be that the upgrade script for Neatline didn&#8217;t &#8220;take&#8221; and needed to be done manually. Here are the steps to do\u00a0that by hand (the script will take care of this if you use it).<\/p>\n<h2>Upgrading Omeka and Neatline from 1.5.x to 2.x.x<\/h2>\n<p>The first step is always to make a backup copy of the database and files. That way if anything goes awry, you can easily put things back together.<\/p>\n<ol>\n<li>To back up the database, simply take a MySQL dump.\n<pre class=\"marking:false nums:false wrap:true whitespace-before:1 whitespace-after:1 lang:mysql decode:true\">mysqldump -uuser -ppassword databasename &gt; databasename.sql<\/pre>\n<p>Do this in the main directory of Omeka. Then make a zip file of the entire Omeka directory.<\/p>\n<pre class=\"nums:false whitespace-before:1 whitespace-after:1 lang:sh decode:true\">zip -r omeka-backup.zip \/path\/to\/omeka\/<\/pre>\n<\/li>\n<li>Next, deactivate any plugins you have installed, including Neatline and NeatlineMaps. One of the big changes with 2.x.x version is that NeatlineMaps is rolled into Neatline.<\/li>\n<li>Grab a 2.0.x version of OmekaEither do this with github\n<pre class=\"nums:false whitespace-before:1 whitespace-after:1 lang:sh decode:true\">git clone https:\/\/github.com\/omeka\/Omeka NewOmeka<\/pre>\n<p>or with a zip file<\/p>\n<pre class=\"nums:false whitespace-before:1 whitespace-after:1 lang:sh decode:true\">wget\u00a0http:\/\/omeka.org\/files\/omeka-2.0.4.zipunzip omeka-2.0.4.zip<\/pre>\n<\/li>\n<li>Add the 2.0.0 version of Neatline plugin into the NewOmeka\/plugins directory, along with any other plugins you may need. NeatlineText, NeatlineSimilie and NeatlineWaypoints may be needed if you used that functionality in the previous version.<\/li>\n<li>Copy the db.ini file from the old installation to the NewOmeka\/ directory.<\/li>\n<li>Now load the admin page for NewOmeka\/ in the browser: http:\/\/domain\/NewOMeka\/admin\/. Upgrade the database and login to upgrade and reactivate the Neatline plugin and other plugins as needed.<\/li>\n<li>You may notice things go smoothly, except the existing Neatline exhibits may not transfer. To get them into the new database tables, add the following two lines at line 80 in the NewOmeka\/plugins\/Neatline\/migrations\/<span class=\"s1\">2<\/span>.<span class=\"s1\">0<\/span>.<span class=\"s1\">0<\/span>\/Neatline_Migration_200.php file:\n<pre class=\"whitespace-before:1 whitespace-after:1 lang:sh decode:true\">$fc = Zend_Registry::get(\"bootstrap\")-&gt;getPluginResource(\"FrontController\")-&gt;getFrontController();\r\n$fc-&gt;getRouter()-&gt;addDefaultRoutes();<\/pre>\n<\/li>\n<li>Run the following database command to allow the background process to run:\n<pre class=\"nums:false whitespace-before:1 whitespace-after:1 lang:sh decode:true \">mysql -uuser -ppassword database --execute=\"UPDATE prefix_processes SET status='starting' WHERE id=1;\"<\/pre>\n<p>&nbsp;<\/li>\n<li>Finally, run the following php command to get the processes started.\n<pre class=\"lang:sh decode:true \">\/path\/to\/bin\/php \/path\/to\/NewOmeka\/application\/scripts\/background.php -p 1<\/pre>\n<p>&nbsp;<\/li>\n<\/ol>\n<h2>Some Script Logic<\/h2>\n<p>Initially, I used the script to upgrade both Omeka and Neatline to the next higher version, going through every single minor version incrementally. When upgrading from Omeka 1.5.1 and Neatline 1.0.0 to the latest versions (2.2.2 for Omeka and 2.3.0 for Neatline), I had to run the script over 20 times!<\/p>\n<p>That was way too intensive, so next I added some logic to just skip to the next major release. That dropped the times needed to run the script down to four. But I could do better than that! I added in some command line options\/flags that allow you to upgrade to any Omeka or Neatline version you specify. Now you can upgrade from Omeka 1.5.x and Neatline 1.x.x directly to Omeka 2.0.4 and Neatline 2.0.0, then right to Omeka 2.2.2 and Neatline 2.3.0. Two steps!<\/p>\n<p>Bash and floating points<\/p>\n<p>As mentioned above, Bash does not work with floating points, so I had to create a function to deal with that. Dealing with version numbers, especially with minor version numbers kind of requires the need to compare floating point numbers&#8230;<\/p>\n<p>In the script I use two different functions:<\/p>\n<pre class=\"lang:sh decode:true\"># Compare two floating point numbers.\r\n#\r\n# Usage:\r\n# result=$( compare_floats number1 number 2 )\r\n# if $result ; then\r\n# echo 'number1 is greater'\r\n# else\r\n# echo 'number2 is greater'\r\n# fi\r\n#\r\n# result : the string 'true' or 'false'\r\n# number1 : the first number to compare\r\n# number2 : the second number to compare\r\nfunction compare_floats() {\r\n    echo | awk -v n1=$1 -v n2=$2 '{if (n1&lt;n2) printf (\"false\"); else printf (\"true\");}'\r\n}\r\n<\/pre>\n<p>This function basically compares two numbers. It outputs true if the first number is greater than the second number, and false if the first number is less than the second number. Another way to think about it would be, is the second number less than the first number?<\/p>\n<pre class=\"lang:sh decode:true\"># Pass the current version first, then the array\r\n# the function echoes the version just greater than the current version,\r\n# i.e., the next version to upgrade to.\r\n#\r\n# Usage:\r\n# variable=$( get_next_version $num array[@] )\r\n#\r\n# variable : the next version greater than $num\r\n# $num : the current version\r\n# array[@] : an array of all possible versions\r\nfunction get_next_version() {\r\n    num=$1\r\n    declare -a ARRAY=(\"${!2}\")\r\n    for i in ${ARRAY[@]}\r\n    do\r\n        if awk -v n1=$num -v n2=$i 'BEGIN{ if (n1&lt;n2) exit 0; exit 1}'; then\r\n            echo $i\r\n            break\r\n        else\r\n            continue\r\n        fi\r\n    done\r\n}\r\n<\/pre>\n<p>For this function, you pass the current version and an array of possible version numbers. The function will compare the number you pass it, compare it with the array, and echo the next highest number.<\/p>\n<p>Both functions use the same awk command, but in a little different format. They test wether one number is greater than the other, and return &#8216;true&#8217; or &#8216;false&#8217;.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>A first project at my new job at the Scholar&#8217;s Lab at UVA was to update some old Omeka\/Neatline sites. I wrote a script to take care of the process now and in the future. https:\/\/github.com\/mossiso\/onus I perhaps went a little overboard and made it pretty robust. I was going to take the opportunity to &hellip; <a href=\"https:\/\/mossiso.com\/2014\/11\/13\/upgrading-omeka-and-neatline\/\" class=\"more-link\">Continue reading <span class=\"screen-reader-text\">Upgrading Omeka and Neatline<\/span><\/a><\/p>\n","protected":false},"author":1,"featured_media":1627,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"jetpack_post_was_ever_published":false,"_jetpack_newsletter_access":"","_jetpack_dont_email_post_to_subs":false,"_jetpack_newsletter_tier_id":0,"footnotes":"","jetpack_publicize_message":"","jetpack_publicize_feature_enabled":true,"jetpack_social_post_already_shared":false,"jetpack_social_options":{"image_generator_settings":{"template":"highway","enabled":false}}},"categories":[243,167,170],"tags":[],"class_list":["post-1618","post","type-post","status-publish","format-standard","has-post-thumbnail","hentry","category-howto","category-technical","category-websites"],"jetpack_publicize_connections":[],"jetpack_featured_media_url":"https:\/\/mossiso.com\/wp-content\/uploads\/2014\/09\/Omeka-Neatline.png","jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/p9wosP-q6","_links":{"self":[{"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/posts\/1618"}],"collection":[{"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/comments?post=1618"}],"version-history":[{"count":23,"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/posts\/1618\/revisions"}],"predecessor-version":[{"id":1671,"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/posts\/1618\/revisions\/1671"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/media\/1627"}],"wp:attachment":[{"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/media?parent=1618"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/categories?post=1618"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/tags?post=1618"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}