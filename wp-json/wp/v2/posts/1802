{"id":1802,"date":"2019-09-23T15:35:25","date_gmt":"2019-09-23T19:35:25","guid":{"rendered":"http:\/\/mossiso.com\/?p=1802"},"modified":"2019-09-23T15:40:55","modified_gmt":"2019-09-23T19:40:55","slug":"js-pagination","status":"publish","type":"post","link":"https:\/\/mossiso.com\/2019\/09\/23\/js-pagination\/","title":{"rendered":"JS Pagination"},"content":{"rendered":"\n<p>Sometimes the seemingly long way round is actually the quickest way. I recently had a project at work that returned a bunch of results from a Solr database. The results are processed by Javascript and written to the page. The original page I was recreating had paginated results (10 results to a page). I thought it would be too much work to get that written into the page, and wanted to just let the JavaScript write all the results to the page. Unfortunately, this meant some queries took up to a full 30 seconds to load! That&#8217;s an eternity for the web! <\/p>\n\n\n\n<p>After playing with the settings and different ways of writing the results to the page I finally decided to just implement pagination. I thought it would take forever. It took a few hours&#8230;<\/p>\n\n\n\n<p>The trick is to complete the process in two steps. <\/p>\n\n\n\n<p>Step 1) create a function that returns an array of page numbers based on  the number of results, the desired number of results per page, and the current page being viewed.<\/p>\n\n\n\n<p>Step 2) create a function that turns the array from the previous function into a bunch of links.<\/p>\n\n\n\n<p>Here is the result:<\/p>\n\n\n\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"ammonshepherd\" data-slug-hash=\"wvwNzyR\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"JS Pagination\">\n  <span>See the Pen <a href=\"https:\/\/codepen.io\/ammonshepherd\/pen\/wvwNzyR\">\n  JS Pagination<\/a> by Ammon Shepherd (<a href=\"https:\/\/codepen.io\/ammonshepherd\">@ammonshepherd<\/a>)\n  on <a href=\"https:\/\/codepen.io\">CodePen<\/a>.<\/span>\n<\/p>\n<script async=\"\" src=\"https:\/\/static.codepen.io\/assets\/embed\/ei.js\"><\/script>\n\n\n\n<div class=\"wp-block-jetpack-markdown\"><p>The GitHub repo is here: <a href=\"https:\/\/github.com\/ammonshepherd\/js-pagination\">https:\/\/github.com\/ammonshepherd\/js-pagination <\/a><\/p>\n<p>There are two functions, <code>pagination()<\/code> and <code>buildPagination()<\/code>.<\/p>\n<h2>pagination()<\/h2>\n<p><code>pagination()<\/code> returns an array of page numbers between one (1) and a given end number, returning a maximum of 10 numbers, with missing ranges replaced with elipses (which are included in the maximum return count). A &#8216;current page&#8217; is supplied, and the current page number is surrounded by the two sequential numbers before and after.<\/p>\n<p>The number of numbers to return is determined by the total number of\nresults to expect divided by the number of results to display per page.  This\nis further affected by the current page displayed. Possible outcomes of the\nfunction could look like so:<\/p>\n<pre><code>[1, 2, 3, 4, 5, 6, 7, '...', 44, 45]        \/\/ 1-7 is the current page\n[1, 2, 3, '...', 7, 8, 9, 10, 11, 12]       \/\/ 2 is the current page\n[1, 2, '...', 10, 11, 12, '...', 44, 45]    \/\/ 8-39 is the current page\n[1, 2, '...', 33, 34, 35, 36, 37, 38, 39]   \/\/ 33-39 is the current page\n\n<\/code><\/pre>\n<p>The function takes three parameters:<\/p>\n<ul>\n<li><code>total_results<\/code> (Required: The total number of results to expect, the end number.)<\/li>\n<li><code>start_number<\/code> (Required: The value\/start number of the page currently displayed.)<\/li>\n<li><code>results_page<\/code> (Optional: The number of results to show for each page. Defaults to 10.)<\/li>\n<\/ul>\n<p>The function returns an array containing the range numbers that can be turned\ninto links..<\/p>\n<p>This code is modified from this <a href=\"https:\/\/www.freecodecamp.org\/news\/https-medium-com-gladchinda-hacks-for-creating-javascript-arrays-a1b80cb372b\/\">FreeCodeCamp article<\/a>.<\/p>\n<h2>buildPagination()<\/h2>\n<p><code>buildPagination()<\/code> takes in a number (the total number of results returned from what ever search query you ran), and builds the HTML for the page numbers and links using the pagination() function.<\/p>\n<h1>Usage<\/h1>\n<p>To use these functions, call the <code>buildPagination()<\/code> function on page load, and put a script tag in the HTML page where it should be used.  It should go at the bottom of the HTML page. In the code below, &quot;200&quot; is where you can put the total number of results returned from the search query.<\/p>\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;head&gt;\n&lt;body onload=&quot;buildPagination(200);&quot;&gt;\n...\n&lt;script src=&quot;pagination.js&quot; type=&quot;text\/javascript&quot;&gt;&lt;\/script&gt;\n&lt;\/body&gt;\n&lt;\/html&gt;\n<\/code><\/pre>\n<p>You can change three variables in the pagination.js file (located at the top of the file):<\/p>\n<ul>\n<li><code>RESULTS_PER_PAGE<\/code> = how many results per page you want to show. The default is ten (10).<\/li>\n<li><code>SEARCH_RESULTS<\/code> = the ID of the HTML element to use for displaying the\nsearch results. This is only used to display text when zero is passed to\nthe buildPagination() function. You should probably have something in place\nto deal with zero results from a search query before you use this function.<\/li>\n<li><code>PAGINATE<\/code> = the ID of the HTML element to use for displaying the\npagination HTML.<\/li>\n<\/ul>\n<p>You can also call the <code>buildPagination()<\/code> function from a JavaScript file and feed the total number of results in dynamically.<\/p>\n<\/div>\n\n\n\n<p><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Sometimes the seemingly long way round is actually the quickest way. I recently had a project at work that returned a bunch of results from a Solr database. The results are processed by Javascript and written to the page. The original page I was recreating had paginated results (10 results to a page). I thought &hellip; <a href=\"https:\/\/mossiso.com\/2019\/09\/23\/js-pagination\/\" class=\"more-link\">Continue reading <span class=\"screen-reader-text\">JS Pagination<\/span><\/a><\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"jetpack_post_was_ever_published":false,"_jetpack_newsletter_access":"","_jetpack_dont_email_post_to_subs":false,"_jetpack_newsletter_tier_id":0,"footnotes":"","jetpack_publicize_message":"JS Pagination, make a list of page numbers.","jetpack_publicize_feature_enabled":true,"jetpack_social_post_already_shared":true,"jetpack_social_options":{"image_generator_settings":{"template":"highway","enabled":false}}},"categories":[4],"tags":[299,302,303,300,301],"class_list":["post-1802","post","type-post","status-publish","format-standard","hentry","category-history","tag-javascript","tag-page-links","tag-paginate","tag-pagination","tag-websites"],"jetpack_publicize_connections":[],"jetpack_featured_media_url":"","jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/p9wosP-t4","_links":{"self":[{"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/posts\/1802"}],"collection":[{"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/comments?post=1802"}],"version-history":[{"count":4,"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/posts\/1802\/revisions"}],"predecessor-version":[{"id":1810,"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/posts\/1802\/revisions\/1810"}],"wp:attachment":[{"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/media?parent=1802"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/categories?post=1802"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/tags?post=1802"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}