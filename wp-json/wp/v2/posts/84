{"id":84,"date":"2007-09-10T14:21:33","date_gmt":"2007-09-10T21:21:33","guid":{"rendered":"http:\/\/historicalwebber.mossiso.com\/archives\/84"},"modified":"2011-03-07T11:05:08","modified_gmt":"2011-03-07T16:05:08","slug":"converting-wordpress-to-static-html","status":"publish","type":"post","link":"https:\/\/mossiso.com\/2007\/09\/10\/converting-wordpress-to-static-html\/","title":{"rendered":"Converting WordPress to static html"},"content":{"rendered":"<p>UPDATE: Check out the new post on a better way to do this here: <a title=\"Convert WP to static HTML \u2013 part 2\" href=\"http:\/\/mossiso.com\/2009\/07\/20\/convert-wp-to-static-html-part-2.html\">Convert WP to Static HTML Part 2<\/a>. Or see the page devoted to the script here: <a title=\"Make WordPress static\" href=\"http:\/\/mossiso.com\/code\/make-wordpress-static\">Make WordPress Static<\/a>.<\/p>\n<p>Usually people are wanting to convert their static html pages to some dynamic content management system. I&#8217;ve run into the issue of needing to go the other way.<\/p>\n<p>A few professors at GMU love to use WordPress for their classes. It&#8217;s a really great way to get more student participation and involve some of those who aren&#8217;t so talkative in class.<\/p>\n<p>But these blogs are usually only needed for one semester, and then just sit there.  This can be a security risk if they are not kept up to date, and is cumbersome when trying to update many of them (one professor had over 30 blogs!).<\/p>\n<p>Sometimes the content should still be viewable, but the need for a whole cms type back-end no longer exists. Sometimes the professor would just like a copy of the pages for their own future research or whatever.<\/p>\n<p>So, I figured out a way to convert a dynamic WordPress site into static html pages.<\/p>\n<p>Here are the basic steps I used:<\/p>\n<ol>\n<li>Change the permalink structure in the WordPress admin section. Alternatively, directly in the database change wp_options.permalink_structure.option_value to &#8220;\/%postname%.html&#8221;.<br \/>\n[code lang=&#8221;SQL&#8221;]<br \/>\nUPDATE `database`.`prefix_options` SET `option_value` = &#8216;\/%year%\/%monthnum%\/%day%\/%postname%\/&#8217; WHERE `prefix_options`.`option_name` = &#8216;permalink_structure&#8217; LIMIT 1 ;<br \/>\n[\/code]&nbsp;<\/p>\n<p><strong class=\"green\">UPDATE (2.12.08):<\/strong> Reading a <a href=\"http:\/\/www.christopherprice.net\/fun-with-wordpress-permalinks-165.html\">post from Christopher Price<\/a> (who linked to this post) about WP permalinks, I&#8217;m thinking using this structure (\/archives\/%post_id%.html) might afford the best results.  I often found a page that displayed the raw HTML instead of being rendered.  This just might fix that issue.<\/p>\n<p><strong class=\"green\">UPDATE (3.11.08):<\/strong> I did some more dynamic to static conversions today, and found out the best permalink structure to use is just the post name. No extra categories and such. So the best structure to use would be this (\/%postname%.html).  The benefit is that the every page is unique with a descriptive name for the url (albeit sometime very long), and there are not as many subdirectory issues that arise.<\/p>\n<p><strong>UPDATE (7.17.09):<\/strong> This time around, I have found that the following seems to work best for permalink: <code>\/%year%\/%monthnum%\/%day%\/%postname%\/<\/code> And cleaned up the SQL statement.<\/li>\n<li>Add the .htaccess to \/path\/to\/wp\/  if not already there (where \/path\/to\/wp\/ is from http:\/\/somedomain.com\/path\/to\/wp\/ ). If there already is a .htaccess file and it is set to have permalinks, then you can probably leave it as it is.<code><br \/>\nRewriteEngine On<br \/>\nRewriteBase \/path\/to\/wp\/<br \/>\nRewriteCond %{REQUEST_FILENAME} !-f<br \/>\nRewriteCond %{REQUEST_FILENAME} !-d<br \/>\nRewriteRule . \/path\/to\/wp\/index.php [L]<br \/>\n<\/code><\/li>\n<li>Use wget to copy all of the files as static html files.<br \/>\n[code lang=&#8221;bash&#8221;]wget &#8211;mirror &#8211;wait=2 -P blogname-static -nH -np -p -k -E &#8211;cut-dirs=3 http:\/\/sitename.com\/path\/to\/blog\/[\/code]<br \/>\n*** Change &#8211;cut-dirs to the appropriate number associated with how many directories are after the domain name. The trailing slash plays a part too. ****<br \/>\n<strong class=\"green\">UPDATE (03.11.08):<\/strong> I found that the &#8211;cut-dirs doesn&#8217;t really do anything this time around.<br \/>\n<strong>UPDATE (7.17.09):<\/strong> This time around, I find the following to work best, even the &#8211;cut-dirs.&nbsp;<\/p>\n<pre>wget --mirror -P wpsite-static --cut-dirs=3 -nH -p -k -E https:\/\/site.com\/path\/to\/wp\/<\/pre>\n<p>This has the bonus of making the directory for you, thus negating the make directory step. Make sure to use two dashes and not an em dash.<\/li>\n<li>Copy the contents of wp-content to save uploaded files, themes, etc. This way copies a lot of unnecessary php files, which could be potentially dangerous, but is really easy if you&#8217;re just converting to archive.  To remove the security threat, just pick and choose the files you need.<br \/>\n[code lang=&#8221;bash&#8221;]cp -r \/path\/to\/wp\/wp-content\/* \/path\/to\/static\/wp-content\/[\/code]<\/li>\n<li>Sometimes the files are created with folders in the archives folder.  To fix this run the following three commands in the archive folder to fix that up.  To get rid of the feed file in all of the directories:<br \/>\n[code]rm -f *\/feed [\/code]<br \/>\nTo delete all of the now empty direcotries:<br \/>\n[code]find . -type d -exec rmdir &#8216;{}&#8217; \\;[\/code]<br \/>\nTo rename the files ###.1 to ###<br \/>\n[code]rename .1 &#8221; `find . -type f -name &#8220;*.1&#8243;`[\/code] That&#8217;s two single quotes after the first &#8216;.1&#8217;<\/li>\n<p><strong class=\"green\">UPDATE (03.11.08):<\/strong> I have found that the old &#8216;<strong>rename<\/strong>&#8216; command [<strong>rename .1 &#8221; *.1<\/strong>]only works on the current directory. If you want to do a recursive renaming you have to use the &#8216;<strong>find<\/strong>&#8216; command.  The above code has changed to reflect this.<br \/>\n<strong class=\"green\">UPDATE (7.14.09):<\/strong> When the rename with find doesn\u2019t work, it\u2019s probably because the post has comments, so there is a folder with the same name as the post\u2019s filename. In this case, just move the file (with the .1 extension) into the folder of the same name, but change the name of the file to index.html<\/p>\n<li>move to wp folder. make a backup of database: [code lang=&#8221;bash&#8221;]mysqldump -u [userfromwp-config.php] -p &#8211;opt databasename &gt; databasename.sql[\/code]<br \/>\n<strong class=\"green\">UPDATE (03.11.08):<\/strong> I found I needed to backup just a few tables from a database that contained many copies of wordpress.  To do this more easily, I used <a title=\"MySQL Table Dump\" href=\"http:\/\/mossiso.com\/?p=83\" target=\"_self\">a little script I wrote<\/a> earlier to dump tables with a common prefix.  This could also work if you just put in the full name of only the tables you wanted to backup.<\/li>\n<li>move one directory above wp install. make tar backup of old wordpress folder: [code lang=&#8221;bash&#8221;]tar -cf wordpress.tar wordpress\/[\/code]<\/li>\n<li>rename the old wordpress folder [code]mv wordpress wordpress-old[\/code]<\/li>\n<li>move the static copy into place [code]mv static\/wordpress\/ wordpress\/[\/code]<\/li>\n<li>test out the site. If it&#8217;s totally broke, just delete the wordpress directory and restore the original from the tar file.<\/li>\n<li>remove the tar file and wordpress-old directory as needed.<\/li>\n<\/ol>\n","protected":false},"excerpt":{"rendered":"<p>UPDATE: Check out the new post on a better way to do this here: Convert WP to Static HTML Part 2. Or see the page devoted to the script here: Make WordPress Static. Usually people are wanting to convert their static html pages to some dynamic content management system. I&#8217;ve run into the issue of &hellip; <a href=\"https:\/\/mossiso.com\/2007\/09\/10\/converting-wordpress-to-static-html\/\" class=\"more-link\">Continue reading <span class=\"screen-reader-text\">Converting WordPress to static html<\/span><\/a><\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"jetpack_post_was_ever_published":false,"_jetpack_newsletter_access":"","_jetpack_dont_email_post_to_subs":false,"_jetpack_newsletter_tier_id":0,"footnotes":"","jetpack_publicize_message":"","jetpack_publicize_feature_enabled":true,"jetpack_social_post_already_shared":false,"jetpack_social_options":{"image_generator_settings":{"template":"highway","enabled":false}}},"categories":[9,10],"tags":[23,277,278],"class_list":["post-84","post","type-post","status-publish","format-standard","hentry","category-technology","category-wordpress","tag-bash-code","tag-technology","tag-wordpress"],"jetpack_publicize_connections":[],"jetpack_featured_media_url":"","jetpack_sharing_enabled":true,"jetpack_shortlink":"https:\/\/wp.me\/p9wosP-1m","_links":{"self":[{"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/posts\/84"}],"collection":[{"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/comments?post=84"}],"version-history":[{"count":3,"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/posts\/84\/revisions"}],"predecessor-version":[{"id":1032,"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/posts\/84\/revisions\/1032"}],"wp:attachment":[{"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/media?parent=84"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/categories?post=84"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/mossiso.com\/wp-json\/wp\/v2\/tags?post=84"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}